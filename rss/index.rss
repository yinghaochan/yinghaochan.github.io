<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>material methods</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Tue, 13 Oct 2015 23:49:39 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>JS test post</title><description>&lt;p&gt;sdfds&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;  describe('findNQueensSolution()', function() {

    it('finds a valid solution for n of 0-7', function() {
      // Skip 2 and 3 because they have no solution.
      [0, 1, 4, 5, 6, 7].map(function(n) {
        var solutionBoard = new Board(findNQueensSolution(n));
        var numPieces = _.reduce(solutionBoard.rows(), function(memo, row) {
          return memo + _.reduce(&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/js-test-pos/</link><guid isPermaLink="false">7ee032ab-5cc3-4cb4-9fdf-e7eef6f31c0f</guid><dc:creator>Ying Hao Chan</dc:creator><pubDate>Tue, 13 Oct 2015 23:07:02 GMT</pubDate><content:encoded>&lt;p&gt;sdfds&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;  describe('findNQueensSolution()', function() {

    it('finds a valid solution for n of 0-7', function() {
      // Skip 2 and 3 because they have no solution.
      [0, 1, 4, 5, 6, 7].map(function(n) {
        var solutionBoard = new Board(findNQueensSolution(n));
        var numPieces = _.reduce(solutionBoard.rows(), function(memo, row) {
          return memo + _.reduce(row, function(memo, col) {
            return memo + col;
          }, 0);
        }, 0);

        expect(solutionBoard.get('n')).to.equal(n);
        expect(numPieces).to.equal(n);
        expect(solutionBoard.hasAnyQueensConflicts()).to.be.equal(false);
      });

      // Check 2 and 3 for no solution
      [2, 3].map(function (n) {
        var solutionBoard = new Board(findNQueensSolution(n));
        var numPieces = _.reduce(solutionBoard.rows(), function(memo, row) {
          return memo + _.reduce(row, function(memo, col) {
            return memo + col;
          }, 0);
        }, 0);

        expect(numPieces).to.equal(0);
        expect(solutionBoard.get('n')).to.equal(n);
      });
    });
  }); 
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item></channel></rss>